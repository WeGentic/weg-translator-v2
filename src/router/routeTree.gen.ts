/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AppRouteImport } from './routes/_app'
import { Route as AppIndexRouteImport } from './routes/_app/index'
import { Route as RegisterRecoverRouteImport } from './routes/register/recover'
import { Route as AppResourcesIndexRouteImport } from './routes/_app/resources/index'
import { Route as AppDashboardIndexRouteImport } from './routes/_app/dashboard/index'
import { Route as AppProjectsProjectIdRouteImport } from './routes/_app/projects/$projectId'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const RegisterRecoverRoute = RegisterRecoverRouteImport.update({
  id: '/recover',
  path: '/recover',
  getParentRoute: () => RegisterRoute,
} as any)
const AppResourcesIndexRoute = AppResourcesIndexRouteImport.update({
  id: '/resources/',
  path: '/resources/',
  getParentRoute: () => AppRoute,
} as any)
const AppDashboardIndexRoute = AppDashboardIndexRouteImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => AppRoute,
} as any)
const AppProjectsProjectIdRoute = AppProjectsProjectIdRouteImport.update({
  id: '/projects/$projectId',
  path: '/projects/$projectId',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/register': typeof RegisterRouteWithChildren
  '/register/recover': typeof RegisterRecoverRoute
  '/': typeof AppIndexRoute
  '/projects/$projectId': typeof AppProjectsProjectIdRoute
  '/dashboard': typeof AppDashboardIndexRoute
  '/resources': typeof AppResourcesIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/register': typeof RegisterRouteWithChildren
  '/register/recover': typeof RegisterRecoverRoute
  '/': typeof AppIndexRoute
  '/projects/$projectId': typeof AppProjectsProjectIdRoute
  '/dashboard': typeof AppDashboardIndexRoute
  '/resources': typeof AppResourcesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRouteWithChildren
  '/register/recover': typeof RegisterRecoverRoute
  '/_app/': typeof AppIndexRoute
  '/_app/projects/$projectId': typeof AppProjectsProjectIdRoute
  '/_app/dashboard/': typeof AppDashboardIndexRoute
  '/_app/resources/': typeof AppResourcesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/register'
    | '/register/recover'
    | '/'
    | '/projects/$projectId'
    | '/dashboard'
    | '/resources'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/register'
    | '/register/recover'
    | '/'
    | '/projects/$projectId'
    | '/dashboard'
    | '/resources'
  id:
    | '__root__'
    | '/_app'
    | '/login'
    | '/register'
    | '/register/recover'
    | '/_app/'
    | '/_app/projects/$projectId'
    | '/_app/dashboard/'
    | '/_app/resources/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/register/recover': {
      id: '/register/recover'
      path: '/recover'
      fullPath: '/register/recover'
      preLoaderRoute: typeof RegisterRecoverRouteImport
      parentRoute: typeof RegisterRoute
    }
    '/_app/resources/': {
      id: '/_app/resources/'
      path: '/resources'
      fullPath: '/resources'
      preLoaderRoute: typeof AppResourcesIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/dashboard/': {
      id: '/_app/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AppDashboardIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/projects/$projectId': {
      id: '/_app/projects/$projectId'
      path: '/projects/$projectId'
      fullPath: '/projects/$projectId'
      preLoaderRoute: typeof AppProjectsProjectIdRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppIndexRoute: typeof AppIndexRoute
  AppProjectsProjectIdRoute: typeof AppProjectsProjectIdRoute
  AppDashboardIndexRoute: typeof AppDashboardIndexRoute
  AppResourcesIndexRoute: typeof AppResourcesIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppIndexRoute: AppIndexRoute,
  AppProjectsProjectIdRoute: AppProjectsProjectIdRoute,
  AppDashboardIndexRoute: AppDashboardIndexRoute,
  AppResourcesIndexRoute: AppResourcesIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface RegisterRouteChildren {
  RegisterRecoverRoute: typeof RegisterRecoverRoute
}

const RegisterRouteChildren: RegisterRouteChildren = {
  RegisterRecoverRoute: RegisterRecoverRoute,
}

const RegisterRouteWithChildren = RegisterRoute._addFileChildren(
  RegisterRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
